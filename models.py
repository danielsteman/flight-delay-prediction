# generated by datamodel-codegen:
#   filename:  https://developer.schiphol.nl/swagger/spec/public-flights-v4.json
#   timestamp: 2023-08-10T15:26:05+00:00

from __future__ import annotations

from typing import List, Optional, Union

from pydantic import BaseModel, Field


class Contact(BaseModel):
    name: str


class Info(BaseModel):
    description: str
    version: str
    title: str
    contact: Contact


class Tag(BaseModel):
    name: str


class Parameter(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    x_data_threescale_name: Optional[str] = Field(None, alias="x-data-threescale-name")
    default: Optional[str] = None
    pattern: Optional[str] = None


class Schema(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Field200(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Responses(BaseModel):
    field_200: Field200 = Field(..., alias="200")


class Get(BaseModel):
    tags: List[str]
    summary: str
    operationId: str
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter]
    responses: Responses


class FieldFlightsId(BaseModel):
    get: Get


class Parameter1(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: Optional[bool] = None
    type: str
    x_data_threescale_name: Optional[str] = Field(None, alias="x-data-threescale-name")
    default: Optional[Union[bool, int, str]] = None
    enum: Optional[List[str]] = None
    format: Optional[str] = None


class Field2001(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Responses1(BaseModel):
    field_200: Field2001 = Field(..., alias="200")


class Get1(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter1]
    responses: Responses1


class FieldFlights(BaseModel):
    get: Get1


class Parameter2(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    x_data_threescale_name: Optional[str] = Field(None, alias="x-data-threescale-name")
    default: Optional[Union[int, str]] = None
    format: Optional[str] = None


class Field2002(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Responses2(BaseModel):
    field_200: Field2002 = Field(..., alias="200")


class Get2(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter2]
    responses: Responses2


class FieldAirlines(BaseModel):
    get: Get2


class Parameter3(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    x_data_threescale_name: Optional[str] = Field(None, alias="x-data-threescale-name")
    default: Optional[str] = None


class Field2003(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Responses3(BaseModel):
    field_200: Field2003 = Field(..., alias="200")


class Get3(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter3]
    responses: Responses3


class FieldAirlinesAirline(BaseModel):
    get: Get3


class Parameter4(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    x_data_threescale_name: Optional[str] = Field(None, alias="x-data-threescale-name")
    default: Optional[Union[int, str]] = None
    format: Optional[str] = None


class Field2004(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Responses4(BaseModel):
    field_200: Field2004 = Field(..., alias="200")


class Get4(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter4]
    responses: Responses4


class FieldAircrafttypes(BaseModel):
    get: Get4


class Field2005(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Responses5(BaseModel):
    field_200: Field2005 = Field(..., alias="200")


class Get5(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter4]
    responses: Responses5


class FieldDestinations(BaseModel):
    get: Get5


class Parameter6(BaseModel):
    name: str
    in_: str = Field(..., alias="in")
    description: str
    required: bool
    type: str
    x_data_threescale_name: Optional[str] = Field(None, alias="x-data-threescale-name")
    default: Optional[str] = None


class Field2006(BaseModel):
    description: str
    schema_: Schema = Field(..., alias="schema")


class Responses6(BaseModel):
    field_200: Field2006 = Field(..., alias="200")


class Get6(BaseModel):
    tags: List[str]
    summary: str
    description: str
    operationId: str
    consumes: List[str]
    produces: List[str]
    parameters: List[Parameter6]
    responses: Responses6


class FieldDestinationsIata(BaseModel):
    get: Get6


class Paths(BaseModel):
    field_flights__id_: FieldFlightsId = Field(..., alias="/flights/{id}")
    field_flights: FieldFlights = Field(..., alias="/flights")
    field_airlines: FieldAirlines = Field(..., alias="/airlines")
    field_airlines__airline_: FieldAirlinesAirline = Field(
        ..., alias="/airlines/{airline}"
    )
    field_aircrafttypes: FieldAircrafttypes = Field(..., alias="/aircrafttypes")
    field_destinations: FieldDestinations = Field(..., alias="/destinations")
    field_destinations__iata_: FieldDestinationsIata = Field(
        ..., alias="/destinations/{iata}"
    )


class Position(BaseModel):
    type: str


class Desks(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties(BaseModel):
    position: Position
    desks: Desks


class RowType(BaseModel):
    properties: Properties


class Items(BaseModel):
    type: str


class Belts(BaseModel):
    type: str
    items: Items


class Properties1(BaseModel):
    belts: Belts


class BaggageClaimType(BaseModel):
    properties: Properties1


class Remarks(BaseModel):
    type: str
    items: Items


class Properties2(BaseModel):
    remarks: Remarks


class RemarksType(BaseModel):
    properties: Properties2


class Codeshares(BaseModel):
    type: str
    items: Items


class Properties3(BaseModel):
    codeshares: Codeshares


class CodesharesType(BaseModel):
    properties: Properties3


class Items3(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Flights(BaseModel):
    type: str
    items: Items3


class Properties4(BaseModel):
    flights: Flights


class FlightList(BaseModel):
    properties: Properties4


class EndTime(BaseModel):
    type: str
    format: str


class Rows(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class StartTime(BaseModel):
    type: str
    format: str


class Properties5(BaseModel):
    endTime: EndTime
    rows: Rows
    startTime: StartTime


class CheckinAllocationType(BaseModel):
    properties: Properties5


class Rows1(BaseModel):
    type: str
    items: Items3


class Properties6(BaseModel):
    rows: Rows1


class RowsType(BaseModel):
    properties: Properties6


class Dutch(BaseModel):
    type: str


class English(BaseModel):
    type: str


class Properties7(BaseModel):
    dutch: Dutch
    english: English


class PublicName(BaseModel):
    properties: Properties7


class Destinations(BaseModel):
    type: str
    items: Items3


class Properties8(BaseModel):
    destinations: Destinations


class DestinationList(BaseModel):
    properties: Properties8


class City(BaseModel):
    type: str


class Country(BaseModel):
    type: str


class Iata(BaseModel):
    type: str


class PublicName1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties9(BaseModel):
    city: City
    country: Country
    iata: Iata
    publicName: PublicName1


class Destination(BaseModel):
    properties: Properties9


class Icao(BaseModel):
    type: str


class Nvls(BaseModel):
    type: str
    format: str


class PublicName2(BaseModel):
    type: str


class Properties10(BaseModel):
    iata: Iata
    icao: Icao
    nvls: Nvls
    publicName: PublicName2


class Airline(BaseModel):
    properties: Properties10


class Airlines(BaseModel):
    type: str
    items: Items3


class Properties11(BaseModel):
    airlines: Airlines


class AirlineList(BaseModel):
    properties: Properties11


class IataMain(BaseModel):
    type: str


class IataSub(BaseModel):
    type: str


class LongDescription(BaseModel):
    type: str


class ShortDescription(BaseModel):
    type: str


class Properties12(BaseModel):
    iataMain: IataMain
    iataSub: IataSub
    longDescription: LongDescription
    shortDescription: ShortDescription


class AircraftType(BaseModel):
    properties: Properties12


class AircraftTypes(BaseModel):
    type: str
    items: Items3


class Properties13(BaseModel):
    aircraftTypes: AircraftTypes


class AircraftTypeList(BaseModel):
    properties: Properties13


class LastUpdatedAt(BaseModel):
    type: str
    format: str


class ActualLandingTime(BaseModel):
    type: str
    format: str
    description: str


class ActualOffBlockTime(BaseModel):
    type: str
    format: str
    description: str


class AircraftRegistration(BaseModel):
    type: str


class AircraftType1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class BaggageClaim(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class CheckinAllocations(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Codeshares1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class EstimatedLandingTime(BaseModel):
    type: str
    format: str
    description: str


class ExpectedTimeBoarding(BaseModel):
    type: str
    format: str
    description: str


class ExpectedTimeGateClosing(BaseModel):
    type: str
    format: str
    description: str


class ExpectedTimeGateOpen(BaseModel):
    type: str
    format: str
    description: str


class ExpectedTimeOnBelt(BaseModel):
    type: str
    format: str
    description: str


class ExpectedSecurityFilter(BaseModel):
    type: str
    description: str


class FlightDirection(BaseModel):
    type: str
    enum: List[str]


class FlightName(BaseModel):
    type: str


class FlightNumber(BaseModel):
    type: str
    format: str


class Gate(BaseModel):
    type: str


class Pier(BaseModel):
    type: str


class Id(BaseModel):
    type: str


class MainFlight(BaseModel):
    type: str


class PrefixIATA(BaseModel):
    type: str


class PrefixICAO(BaseModel):
    type: str


class AirlineCode(BaseModel):
    type: str
    format: str


class PublicEstimatedOffBlockTime(BaseModel):
    type: str
    format: str
    description: str


class PublicFlightState(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Route(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class ScheduleDateTime(BaseModel):
    type: str
    format: str
    description: str


class ScheduleDate(BaseModel):
    type: str
    description: str


class ScheduleTime(BaseModel):
    type: str
    description: str


class ServiceType(BaseModel):
    type: str
    description: str


class Terminal(BaseModel):
    type: str
    format: str


class TransferPositions(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class SchemaVersion(BaseModel):
    type: str


class Properties14(BaseModel):
    lastUpdatedAt: LastUpdatedAt
    actualLandingTime: ActualLandingTime
    actualOffBlockTime: ActualOffBlockTime
    aircraftRegistration: AircraftRegistration
    aircraftType: AircraftType1
    baggageClaim: BaggageClaim
    checkinAllocations: CheckinAllocations
    codeshares: Codeshares1
    estimatedLandingTime: EstimatedLandingTime
    expectedTimeBoarding: ExpectedTimeBoarding
    expectedTimeGateClosing: ExpectedTimeGateClosing
    expectedTimeGateOpen: ExpectedTimeGateOpen
    expectedTimeOnBelt: ExpectedTimeOnBelt
    expectedSecurityFilter: ExpectedSecurityFilter
    flightDirection: FlightDirection
    flightName: FlightName
    flightNumber: FlightNumber
    gate: Gate
    pier: Pier
    id: Id
    mainFlight: MainFlight
    prefixIATA: PrefixIATA
    prefixICAO: PrefixICAO
    airlineCode: AirlineCode
    publicEstimatedOffBlockTime: PublicEstimatedOffBlockTime
    publicFlightState: PublicFlightState
    route: Route
    scheduleDateTime: ScheduleDateTime
    scheduleDate: ScheduleDate
    scheduleTime: ScheduleTime
    serviceType: ServiceType
    terminal: Terminal
    transferPositions: TransferPositions
    schemaVersion: SchemaVersion


class Flight(BaseModel):
    properties: Properties14


class Items8(BaseModel):
    type: str


class Destinations1(BaseModel):
    type: str
    items: Items8


class Eu(BaseModel):
    type: str
    description: str


class Visa(BaseModel):
    type: str
    description: str


class Properties15(BaseModel):
    destinations: Destinations1
    eu: Eu
    visa: Visa


class RouteType(BaseModel):
    properties: Properties15


class Items9(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Desks1(BaseModel):
    type: str
    items: Items9


class Properties16(BaseModel):
    desks: Desks1


class DesksType(BaseModel):
    properties: Properties16


class Properties17(BaseModel):
    iataMain: IataMain
    iataSub: IataSub


class AircraftTypeType(BaseModel):
    properties: Properties17


class CheckinClass(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Position1(BaseModel):
    type: str
    format: str


class Properties18(BaseModel):
    checkinClass: CheckinClass
    position: Position1


class DeskType(BaseModel):
    properties: Properties18


class Code(BaseModel):
    type: str


class Description(BaseModel):
    type: str


class Properties19(BaseModel):
    code: Code
    description: Description


class CheckinClassType(BaseModel):
    properties: Properties19


class Items10(BaseModel):
    type: str
    format: str


class TransferPositions1(BaseModel):
    type: str
    items: Items10


class Properties20(BaseModel):
    transferPositions: TransferPositions1


class TransferPositionsType(BaseModel):
    properties: Properties20


class Items11(BaseModel):
    type: str


class FlightStates(BaseModel):
    type: str
    items: Items11


class Properties21(BaseModel):
    flightStates: FlightStates


class PublicFlightStateType(BaseModel):
    properties: Properties21


class Items12(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class CheckinAllocations1(BaseModel):
    type: str
    items: Items12


class Remarks1(BaseModel):
    field_ref: str = Field(..., alias="$ref")


class Properties22(BaseModel):
    checkinAllocations: CheckinAllocations1
    remarks: Remarks1


class CheckinAllocationsType(BaseModel):
    properties: Properties22


class Definitions(BaseModel):
    RowType: RowType
    BaggageClaimType: BaggageClaimType
    RemarksType: RemarksType
    CodesharesType: CodesharesType
    FlightList: FlightList
    CheckinAllocationType: CheckinAllocationType
    RowsType: RowsType
    PublicName: PublicName
    DestinationList: DestinationList
    Destination: Destination
    Airline: Airline
    AirlineList: AirlineList
    AircraftType: AircraftType
    AircraftTypeList: AircraftTypeList
    Flight: Flight
    RouteType: RouteType
    DesksType: DesksType
    AircraftTypeType: AircraftTypeType
    DeskType: DeskType
    CheckinClassType: CheckinClassType
    TransferPositionsType: TransferPositionsType
    PublicFlightStateType: PublicFlightStateType
    CheckinAllocationsType: CheckinAllocationsType


class Model(BaseModel):
    swagger: str
    info: Info
    host: str
    basePath: str
    schemes: List[str]
    tags: List[Tag]
    paths: Paths
    definitions: Definitions
